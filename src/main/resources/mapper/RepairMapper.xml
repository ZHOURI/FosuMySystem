<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.honeyjam.dorm.mapper.RepairMapper">
  <resultMap id="BaseResultMap" type="cn.honeyjam.dorm.pojo.Repair">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="room_ID" jdbcType="VARCHAR" property="roomId" />
    <result column="worker_ID" jdbcType="BIGINT" property="workerId" />
    <result column="reporter" jdbcType="VARCHAR" property="reporter" />
    <result column="reportTime" jdbcType="TIMESTAMP" property="reporttime" />
    <result column="images" jdbcType="VARCHAR" property="images" />
    <result column="repairTime" jdbcType="TIMESTAMP" property="repairtime" />
    <result column="pay" jdbcType="REAL" property="pay" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.honeyjam.dorm.pojo.RepairWithBLOBs">
    <result column="reason" jdbcType="LONGVARCHAR" property="reason" />
    <result column="remarks" jdbcType="LONGVARCHAR" property="remarks" />
    <result column="result" jdbcType="LONGVARCHAR" property="result" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, room_ID, worker_ID, reporter, reportTime, images, repairTime, pay
  </sql>
  <sql id="Blob_Column_List">
    reason, remarks, result
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.honeyjam.dorm.pojo.RepairExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_repair
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.honeyjam.dorm.pojo.RepairExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_repair
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_repair
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_repair
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.honeyjam.dorm.pojo.RepairExample">
    delete from tb_repair
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.honeyjam.dorm.pojo.RepairWithBLOBs">
    insert into tb_repair (id, room_ID, worker_ID, 
      reporter, reportTime, images, 
      repairTime, pay, reason, 
      remarks, result)
    values (#{id,jdbcType=INTEGER}, #{roomId,jdbcType=VARCHAR}, #{workerId,jdbcType=BIGINT}, 
      #{reporter,jdbcType=VARCHAR}, #{reporttime,jdbcType=TIMESTAMP}, #{images,jdbcType=VARCHAR}, 
      #{repairtime,jdbcType=TIMESTAMP}, #{pay,jdbcType=REAL}, #{reason,jdbcType=LONGVARCHAR}, 
      #{remarks,jdbcType=LONGVARCHAR}, #{result,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.honeyjam.dorm.pojo.RepairWithBLOBs">
    insert into tb_repair
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="roomId != null">
        room_ID,
      </if>
      <if test="workerId != null">
        worker_ID,
      </if>
      <if test="reporter != null">
        reporter,
      </if>
      <if test="reporttime != null">
        reportTime,
      </if>
      <if test="images != null">
        images,
      </if>
      <if test="repairtime != null">
        repairTime,
      </if>
      <if test="pay != null">
        pay,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="result != null">
        result,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roomId != null">
        #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="workerId != null">
        #{workerId,jdbcType=BIGINT},
      </if>
      <if test="reporter != null">
        #{reporter,jdbcType=VARCHAR},
      </if>
      <if test="reporttime != null">
        #{reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="images != null">
        #{images,jdbcType=VARCHAR},
      </if>
      <if test="repairtime != null">
        #{repairtime,jdbcType=TIMESTAMP},
      </if>
      <if test="pay != null">
        #{pay,jdbcType=REAL},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=LONGVARCHAR},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=LONGVARCHAR},
      </if>
      <if test="result != null">
        #{result,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.honeyjam.dorm.pojo.RepairExample" resultType="java.lang.Long">
    select count(*) from tb_repair
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_repair
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.roomId != null">
        room_ID = #{record.roomId,jdbcType=VARCHAR},
      </if>
      <if test="record.workerId != null">
        worker_ID = #{record.workerId,jdbcType=BIGINT},
      </if>
      <if test="record.reporter != null">
        reporter = #{record.reporter,jdbcType=VARCHAR},
      </if>
      <if test="record.reporttime != null">
        reportTime = #{record.reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.images != null">
        images = #{record.images,jdbcType=VARCHAR},
      </if>
      <if test="record.repairtime != null">
        repairTime = #{record.repairtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.pay != null">
        pay = #{record.pay,jdbcType=REAL},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.result != null">
        result = #{record.result,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update tb_repair
    set id = #{record.id,jdbcType=INTEGER},
      room_ID = #{record.roomId,jdbcType=VARCHAR},
      worker_ID = #{record.workerId,jdbcType=BIGINT},
      reporter = #{record.reporter,jdbcType=VARCHAR},
      reportTime = #{record.reporttime,jdbcType=TIMESTAMP},
      images = #{record.images,jdbcType=VARCHAR},
      repairTime = #{record.repairtime,jdbcType=TIMESTAMP},
      pay = #{record.pay,jdbcType=REAL},
      reason = #{record.reason,jdbcType=LONGVARCHAR},
      remarks = #{record.remarks,jdbcType=LONGVARCHAR},
      result = #{record.result,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_repair
    set id = #{record.id,jdbcType=INTEGER},
      room_ID = #{record.roomId,jdbcType=VARCHAR},
      worker_ID = #{record.workerId,jdbcType=BIGINT},
      reporter = #{record.reporter,jdbcType=VARCHAR},
      reportTime = #{record.reporttime,jdbcType=TIMESTAMP},
      images = #{record.images,jdbcType=VARCHAR},
      repairTime = #{record.repairtime,jdbcType=TIMESTAMP},
      pay = #{record.pay,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.honeyjam.dorm.pojo.RepairWithBLOBs">
    update tb_repair
    <set>
      <if test="roomId != null">
        room_ID = #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="workerId != null">
        worker_ID = #{workerId,jdbcType=BIGINT},
      </if>
      <if test="reporter != null">
        reporter = #{reporter,jdbcType=VARCHAR},
      </if>
      <if test="reporttime != null">
        reportTime = #{reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="images != null">
        images = #{images,jdbcType=VARCHAR},
      </if>
      <if test="repairtime != null">
        repairTime = #{repairtime,jdbcType=TIMESTAMP},
      </if>
      <if test="pay != null">
        pay = #{pay,jdbcType=REAL},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=LONGVARCHAR},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=LONGVARCHAR},
      </if>
      <if test="result != null">
        result = #{result,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.honeyjam.dorm.pojo.RepairWithBLOBs">
    update tb_repair
    set room_ID = #{roomId,jdbcType=VARCHAR},
      worker_ID = #{workerId,jdbcType=BIGINT},
      reporter = #{reporter,jdbcType=VARCHAR},
      reportTime = #{reporttime,jdbcType=TIMESTAMP},
      images = #{images,jdbcType=VARCHAR},
      repairTime = #{repairtime,jdbcType=TIMESTAMP},
      pay = #{pay,jdbcType=REAL},
      reason = #{reason,jdbcType=LONGVARCHAR},
      remarks = #{remarks,jdbcType=LONGVARCHAR},
      result = #{result,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.honeyjam.dorm.pojo.Repair">
    update tb_repair
    set room_ID = #{roomId,jdbcType=VARCHAR},
      worker_ID = #{workerId,jdbcType=BIGINT},
      reporter = #{reporter,jdbcType=VARCHAR},
      reportTime = #{reporttime,jdbcType=TIMESTAMP},
      images = #{images,jdbcType=VARCHAR},
      repairTime = #{repairtime,jdbcType=TIMESTAMP},
      pay = #{pay,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>