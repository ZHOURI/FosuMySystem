<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.honeyjam.dorm.mapper.FeesMapper">
  <resultMap id="BaseResultMap" type="cn.honeyjam.dorm.pojo.Fees">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="stu_ID" jdbcType="BIGINT" property="stuId" />
    <result column="years" jdbcType="INTEGER" property="years" />
    <result column="fee" jdbcType="REAL" property="fee" />
    <result column="payStatus" jdbcType="VARCHAR" property="paystatus" />
    <result column="payTime" jdbcType="TIMESTAMP" property="paytime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, stu_ID, years, fee, payStatus, payTime
  </sql>
  <select id="selectByExample" parameterType="cn.honeyjam.dorm.pojo.FeesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_fees
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_fees
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_fees
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.honeyjam.dorm.pojo.FeesExample">
    delete from tb_fees
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.honeyjam.dorm.pojo.Fees">
    insert into tb_fees (id, stu_ID, years, 
      fee, payStatus, payTime
      )
    values (#{id,jdbcType=INTEGER}, #{stuId,jdbcType=BIGINT}, #{years,jdbcType=INTEGER}, 
      #{fee,jdbcType=REAL}, #{paystatus,jdbcType=VARCHAR}, #{paytime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.honeyjam.dorm.pojo.Fees">
    insert into tb_fees
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="stuId != null">
        stu_ID,
      </if>
      <if test="years != null">
        years,
      </if>
      <if test="fee != null">
        fee,
      </if>
      <if test="paystatus != null">
        payStatus,
      </if>
      <if test="paytime != null">
        payTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="stuId != null">
        #{stuId,jdbcType=BIGINT},
      </if>
      <if test="years != null">
        #{years,jdbcType=INTEGER},
      </if>
      <if test="fee != null">
        #{fee,jdbcType=REAL},
      </if>
      <if test="paystatus != null">
        #{paystatus,jdbcType=VARCHAR},
      </if>
      <if test="paytime != null">
        #{paytime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.honeyjam.dorm.pojo.FeesExample" resultType="java.lang.Long">
    select count(*) from tb_fees
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_fees
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.stuId != null">
        stu_ID = #{record.stuId,jdbcType=BIGINT},
      </if>
      <if test="record.years != null">
        years = #{record.years,jdbcType=INTEGER},
      </if>
      <if test="record.fee != null">
        fee = #{record.fee,jdbcType=REAL},
      </if>
      <if test="record.paystatus != null">
        payStatus = #{record.paystatus,jdbcType=VARCHAR},
      </if>
      <if test="record.paytime != null">
        payTime = #{record.paytime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_fees
    set id = #{record.id,jdbcType=INTEGER},
      stu_ID = #{record.stuId,jdbcType=BIGINT},
      years = #{record.years,jdbcType=INTEGER},
      fee = #{record.fee,jdbcType=REAL},
      payStatus = #{record.paystatus,jdbcType=VARCHAR},
      payTime = #{record.paytime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.honeyjam.dorm.pojo.Fees">
    update tb_fees
    <set>
      <if test="stuId != null">
        stu_ID = #{stuId,jdbcType=BIGINT},
      </if>
      <if test="years != null">
        years = #{years,jdbcType=INTEGER},
      </if>
      <if test="fee != null">
        fee = #{fee,jdbcType=REAL},
      </if>
      <if test="paystatus != null">
        payStatus = #{paystatus,jdbcType=VARCHAR},
      </if>
      <if test="paytime != null">
        payTime = #{paytime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.honeyjam.dorm.pojo.Fees">
    update tb_fees
    set stu_ID = #{stuId,jdbcType=BIGINT},
      years = #{years,jdbcType=INTEGER},
      fee = #{fee,jdbcType=REAL},
      payStatus = #{paystatus,jdbcType=VARCHAR},
      payTime = #{paytime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>