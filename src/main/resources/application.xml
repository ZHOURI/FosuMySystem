<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--spring配置的核心点，数据源，与mybatis的整合，事务控制-->
    <!-- 扫描包下除Controller注解所有使用注解的类型，@Controller由springMVC维护 -->
    <context:component-scan base-package="cn.honeyjam">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--<property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>-->
        <!--<property name="minPoolSize" value="${c3p0.minPoolSize}"/>-->
        <!--<property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}"/>-->
        <!--<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}"/>-->
        <!--<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>-->
    </bean>
    <!-- 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描pojo包 使用别名 -->
        <property name="typeAliasesPackage" value="cn.honeyjam.dorm.pojo"/>
        <!--指定mybatis mapper文件的位置，有xml文件才需要，逆向工程必须开启-->
        <!--<property name="mapperLocations" value="classpath:mapper/*.xml"></property>-->
    </bean>
    
    <!-- 配置扫描Dao接口包，动态实现Dao接口，使用的是通用mapper，注入到spring容器中 -->
    <bean id="mapperScanner" class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描mapper接口包,加入IOC容器 -->
        <property name="basePackage" value="cn.honeyjam.dorm.mapper"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置基于注解的声明式事务 2选1 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--开启基于注解的事务，使用xml配置形式的事务(主要使用配置式) 2选1-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
        <!--所有方法都是事务方法-->
        <tx:method name="*" isolation="DEFAULT"/>
        <!--以find开始的方法都是查询方法,findName()，只读-->
        <tx:method name="find*" read-only="true"/>
    </tx:attributes>
    </tx:advice>
    <aop:config>
    <!--建立切入点表达式和事务通知的对应关系 ，事务如何切入-->
    <aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.honeyjam.dorm.service..*(..))"></aop:advisor>
    </aop:config>
</beans>
